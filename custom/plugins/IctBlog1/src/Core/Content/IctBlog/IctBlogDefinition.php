<?php declare(strict_types=1);

 namespace IctBlog1\Core\Content\IctBlog1;

 use IctBlog1\Core\Content\IctBlog1\Aggregate\IctBlogTranslation\IctBlogTranslationDefinition;
 use IctBlog1\Core\Content\IctCategory\IctCategoryDefinition;
 use Shopware\Core\Content\Product\ProductDefinition;
 use Shopware\Core\Framework\DataAbstractionLayer\EntityDefinition;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\BoolField;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\DateTimeField;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\FkField;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\Flag\ApiAware;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\Flag\PrimaryKey;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\Flag\Required;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\IdField;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\ManyToManyAssociationField;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\OneToOneAssociationField;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\ReferenceVersionField;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\TranslatedField;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\TranslationsAssociationField;
 use Shopware\Core\Framework\DataAbstractionLayer\FieldCollection;

 class IctBlogDefinition extends EntityDefinition
 {

     public const ENTITY_NAME = "ict_blog";
     /**
      * @return string
      */
     public function getEntityName(): string
     {
         // TODO: Implement getEntityName() method.
         return self::ENTITY_NAME;
     }
     public function getEntityClass(): string
     {
         return IctBlogEntity::class; // TODO: Change the autogenerated stub
     }
     public function getCollectionClass(): string
     {
         return IctBlogCollection::class; // TODO: Change the autogenerated stub
     }

     /**
      * @return FieldCollection
      */
     protected function defineFields(): FieldCollection
     {
        /**
         * id
         * name
         * description
         * release date
         * active
         * Categories
         * Author
         * Product (M to M)
        */
         // TODO: Implement defineFields() method.
         return new FieldCollection([
             (new IdField('id','id'))->addFlags(new PrimaryKey(), new Required()),
             (new TranslatedField('name','name'))->addFlags(new ApiAware()),
             (new TranslatedField('description','description'))->addFlags(new ApiAware()),
             (new TranslatedField('author', 'author'))->addFlags(new ApiAware()),
             (new DateTimeField('release_date', 'releaseDate')),
             (new BoolField('active','active')),
             (new FkField('category_id','categoryId',IctCategoryDefinition::class )),
             (new FkField('product_id','prdouctId', ProductDefinition::class)),
             (new ReferenceVersionField(self::class, 'product_id'))->addFlags(new ApiAware()),
             (new OneToOneAssociationField('blogCategory', 'blog_category', 'id',IctCategoryDefinition::class)),
             (new ManyToManyAssociationField(
                 'product',
                 ProductDefinition::class,
                 ProductBlogMappingDefinition::class,
                 'product_id',
                 'id',
             )),
             (new TranslationsAssociationField(
                 IctBlogTranslationDefinition::class,
                 'ict_blog_id',
             ))->addFlags(new ApiAware(), new Required()),
         ]);
     }
 }